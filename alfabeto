PROGRAMA -> DECLARACAO CODIGO

DECLARACAO -> TIPO ID SIMBOLO_TERMINAL 
| TIPO ID SIMB_ATRIB [CONST_INT|CONST_boolean|CONST_STRING] SIMBOLO_TERMINAL 
| Lambda

TIPO -> string| int| byte| boolean

SIMBOLO_TERMINAL -> ;

SIMBOLO_ATRIB-> =

CODIGO -> begin LINHA_DE_COMANDO END

LINHA_DE_COMANDO -> ESCREVE
                  | LER
                  | ATRIBUICAO
                  | LOOP
                  | CONDICIONAL
                  | COMENTARIO

ESCREVE -> SIMB_ESCREVE SIMB_CONCAT ID SIMBOLO_TERMINAL

SIMB_ESCREVE ->write | whiteln

SIMB_CONCAT -> ,

LER -> SIMB_LER SIMB_CONCAT ID SIMBOLO_TERMINAL

SIMB_LER ->read | readln


CONDICIONAL -> OPERCAO_LOGICA | OPERCAO

ATRIBUICAO ->COMANDO_ATRIB

COMENTARIO -> { CONTEUDO_COMENTARIO } | /*CONTEUDO_COMENTARIO*/

CONTEUDO_COMENTARIO -> ^\{[\d\D]*\} | ^/\*[\d\D]*\/

ID ->[\d\D]

DECLARACAO_STRING -> string ID SIMBOLO_TERMINAL | string ID ATRIBUICAO CONST_STRING SIMBOLO_TERMINAL

DECLARACAO_INT ID SIMBOLO_TERMINAL | string ID ATRIBUICAO CONST_INT SIMBOLO_TERMINAL

CONST_STRING -> ^\"[\d\D]\" 

CONST_INT -> [0-9]+

CONST_boolean -> true | false

SIMB_ARITM_LOGICO ->  < | > |<= | >= | not | and

SIMB_STR_LOGICO ->  == 

SIMB_OPERACAO -> + | - | / | *

OPERCAO -> ID SIMB_OPERACAO ID SIMBOLO_TERMINAL

EXPRESSAO_LOGICA -> ID SIMB_ARITM_LOGICO | SIMB_STR_LOGICO ID 

COMANDO_IF -> IF (OPERCAO_LOGICA) BEGIN LINHA_DE_COMANDO END | IF EXPRESSAO_LOGICA LINHA_DE_COMANDO SIMBOLO_TERMINAL

COMANDO_ELSE -> END ELSE BEGIN LINHA_DE_COMANDO END

COMANDO_WHILE -> WHILE (EXPRESSAO_LOGICA_LOGICA) BEGIN LINHA_DE_COMANDO END | WHILE EXPRESSAO_LOGICA LINHA_DE_COMANDO SIMBOLO_TERMINAL

COMANDO_ATRIB = ID SIMB_ATRIB SIMBOLO_TERMINAL
